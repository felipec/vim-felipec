#!/usr/bin/env ruby

require_relative '../../lib/colors'
require_relative '../../lib/util'

def hi_color(color)
  rgb = get_color_rgb(color)
  hex = rgb_to_hex(*rgb)
  code = rgb_to_x256(*rgb)
  [hex.dump, code]
end

def hi(conf)
  fg, bg, style = conf.split(' ')
  params = [hi_color(fg), hi_color(bg)].transpose.flatten
  params << style.dump if style
  '[ %s ]' % params.join(', ')
end

def component(*conf)
  '[ %s ]' % conf.map { |e| hi(e) }.join(', ')
end

puts <<EOL
if exists('g:lightline')

  let g:lightline#colorscheme#felipec#palette = {
  \\   'normal': {
  \\     'left': #{component('darkgray blue bold', 'fg darkgray')},
  \\     'middle': #{component('suvagray darkgray')},
  \\     'right': #{component('darkgray silver', 'darkgray suvagray', 'silver darkgray')},
  \\     'error': #{component('darkgray red')},
  \\     'warning': #{component('darkgray yellow')},
  \\   },
  \\   'inactive': {
  \\     'left': #{component('suvagray darkgray bold', 'suvagray darkgray')},
  \\     'right': #{component('bg gray', 'suvagray darkgray')},
  \\   },
  \\   'insert': {
  \\     'left': #{component('insert_darkgray fg bold', 'fg insert_darkgray')},
  \\     'middle': #{component('insert_silver insert_darkgray')},
  \\     'right': #{component('darkgray insert_silver', 'darkgray insert_suvagray', 'silver insert_darkgray')},
  \\   },
  \\   'replace': {
  \\     'left': #{component('darkgray red bold', 'fg darkgray')},
  \\     'middle': #{component('suvagray darkgray')},
  \\     'right': #{component('darkgray silver', 'darkgray suvagray', 'silver darkgray')},
  \\   },
  \\   'visual': {
  \\     'left': #{component('darkgray magenta bold', 'fg darkgray')},
  \\   },
  \\   'tabline': {
  \\     'left': #{component('suvagray darkgray')},
  \\     'tabsel': #{component('bg gray')},
  \\     'middle': #{component('suvagray darkgray')},
  \\     'right': #{component('suvagray darkgray')},
  \\   },
  \\ }

endif
EOL
