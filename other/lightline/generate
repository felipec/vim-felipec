#!/usr/bin/env ruby

require_relative '../../lib/colors'
require_relative '../../lib/util'

colors = %w[fg bg silver suvagray gray darkgray blue red yellow magenta]
colors += %w[insert_silver insert_suvagray insert_darkgray]

colors.each do |color|
  rgb = get_color_rgb(color)
  hex = rgb_to_hex(*rgb)
  code = rgb_to_x256(*rgb)
  value = "[ '%s', %i ]" % [ hex, code]
  eval "$#{color} = #{value.dump}"
end

puts <<EOL
if exists('g:lightline')

  let s:p = { 'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {} }

  let s:p.normal.left = [ [ #{$darkgray}, #{$blue}, 'bold' ], [ #{$fg}, #{$darkgray} ] ]
  let s:p.normal.middle = [ [ #{$suvagray}, #{$darkgray} ] ]
  let s:p.normal.right = [ [ #{$darkgray}, #{$silver} ], [ #{$darkgray}, #{$suvagray} ], [ #{$silver}, #{$darkgray} ] ]
  let s:p.normal.error = [ [ #{$darkgray}, #{$red} ] ]
  let s:p.normal.warning = [ [ #{$darkgray}, #{$yellow} ] ]

  let s:p.inactive.left = [ [ #{$suvagray}, #{$darkgray}, 'bold' ], [ #{$suvagray}, #{$darkgray} ] ]
  let s:p.inactive.right = [ [ #{$bg}, #{$gray} ], [ #{$suvagray}, #{$darkgray} ] ]

  let s:p.insert.left = [ [ #{$insert_darkgray}, #{$fg}, 'bold' ], [ #{$fg}, #{$insert_darkgray} ] ]
  let s:p.insert.middle = [ [ #{$insert_silver}, #{$insert_darkgray} ] ]
  let s:p.insert.right = [ [ #{$darkgray}, #{$insert_silver} ], [ #{$darkgray}, #{$insert_suvagray} ], [ #{$silver}, #{$insert_darkgray} ] ]

  let s:p.replace.left = [ [ #{$darkgray}, #{$red}, 'bold' ], [ #{$fg}, #{$darkgray} ] ]
  let s:p.replace.middle = copy(s:p.normal.middle)
  let s:p.replace.right = copy(s:p.normal.right)

  let s:p.visual.left = [ [ #{$darkgray}, #{$magenta}, 'bold' ], [ #{$fg}, #{$darkgray} ] ]

  let s:p.tabline.left = [ [ #{$suvagray}, #{$darkgray} ] ]
  let s:p.tabline.tabsel = [ [ #{$bg}, #{$gray} ] ]
  let s:p.tabline.middle = [ [ #{$suvagray}, #{$darkgray} ] ]
  let s:p.tabline.right = [ [ #{$suvagray}, #{$darkgray} ] ]

  let g:lightline#colorscheme#felipec#palette = lightline#colorscheme#flatten(s:p)

endif
EOL
